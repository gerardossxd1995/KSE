«IMPORT IAC»
«EXTENSION JavaHelpers::NodeHelper»
«EXTENSION JavaHelpers::Variables»
«DEFINE Activity FOR IAC::Node»
	«FILE ClassName(name)+"/"+ClassName(name)+".h" activities_outlet»
#ifndef _«ClassName(name)»_h_
#define _«ClassName(name)»_h_ 1

#include "architecture/executables/IActivity.h"
		«IF !variables.isEmpty -»
#include "messages/AllMessagesHeader.h"
		«ENDIF-»

ACTIVITY_START
class «ClassName(name)» : public IActivity {
			
public:
	ACTIVITY_CONSTRUCTOR(«ClassName(name)»)
	int ACTIVITY_VISIBLE IEX_DIRECTIVE_HOT Execute ();
	
	void ACTIVITY_VISIBLE UserInit ();
	
	std::string ACTIVITY_VISIBLE GetName ();
		«IF !variables.isEmpty -»
private:
	void read_messages();
«DeclareVariables(variables)»
		«ENDIF-»
	
};
ACTIVITY_END

#endif // _«ClassName(name)»_h_
	«ENDFILE»
	«FILE ClassName(name)+"/"+ClassName(name)+".cpp" activities_outlet»
#include "«ClassName(name)+".h"»"


ACTIVITY_REGISTER(«ClassName(name)»);

int «ClassName(name)»::Execute() {
		«IF !variables.isEmpty -»
	read_messages();
		«ENDIF-»		
	return 0;
}
void «ClassName(name)»::UserInit () {	
		«IF !variables.isEmpty -»
«InitVariables(variables)»
		«ENDIF-»
}
std::string «ClassName(name)»::GetName () {
	return "«ClassName(name)»";
}
		«IF !variables.isEmpty -»
void «ClassName(name)»::read_messages(){
«ReadVariables(variables)»
}
		«ENDIF-»
	«ENDFILE»
	«FILE ClassName(name)+"/"+"CMakeLists.txt" activities_outlet»
#if ( NOT ( ${TargetPlatform} STREQUAL "robot" AND ${RobotPlatform} STREQUAL "nao" ) )
#    return()
#endif ( NOT ( ${TargetPlatform} STREQUAL "robot" AND ${RobotPlatform} STREQUAL "nao" ) )

#include( ../../hal/robot/nao-1.6.0/bootstrap.cmake )

set ( ActivityName «ClassName(name)» )

set ( ActivitySrcs  «ClassName(name)+".cpp"» )

include ( ../activTemplate.cmake )

#use_lib(${ActivityName} ALCOMMON ALVALUE ALMATH LIBCORE TOOLS)	
	«ENDFILE»
«ENDDEFINE»
